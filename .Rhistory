foo <- c(2,3,4,5)
#Reading in all libraries that we'll use
library(irr)
source('~/Dropbox/_Projects/Gesture - Case Marking/Analysis - Post Blindcoding/AnalysisNew_MK additions.R')
source('~/Dropbox/_Projects/Gesture - Case Marking/Analysis - Post Blindcoding/AnalysisNew_MK additions.R')
install.packages("jsonlite")
library(jsonlite)
# url with some information about project in Andalussia
url <- 'http://www.juntadeandalucia.es/export/drupaljda/ayudas.json'
# read url and convert to data.frame
document <- fromJSON(txt=url)
install.packages("httr")
library(jsonlite)
# url with some information about project in Andalussia
url <- 'http://www.juntadeandalucia.es/export/drupaljda/ayudas.json'
# read url and convert to data.frame
document <- fromJSON(txt=url)
url
document
document[1,]
document[,1]
document[,3]
document[,8]
df.long = mutate(df.long, question = as.factor(question),
asdfasdfasfd)
# Packages ----------------------------------------------------------------
rm(list=ls())
library(lsr)
library(dplyr)
library(rjson)
library(RSQLite)
# Read data ---------------------------------------------------------------
con = dbConnect(SQLite(),dbname = "participants.db");
df.complete = dbReadTable(con,"almost") #change the name of the database here (mine was called "almost")
dbDisconnect(con)
#filter out incompletes
df.complete = subset(df.complete,status %in% c(3,4))
#save data of different experiments in separate data frames
df.complete.experiment_1 = subset(df.complete,codeversion == "experiment_1")
df.complete.experiment_2 = subset(df.complete,codeversion == "experiment_2")
df.complete.experiment_3 = subset(df.complete,codeversion == "experiment_3")
# EXP1: Structure data ----------------------------------------------------------
df.wide = data.frame(matrix(nrow=nrow(df.complete.experiment_1),ncol=8))
colnames(df.wide) = c("experiment","participant","id","gender","age","condition","counterbalance","feedback")
for (i in 1:nrow(df.wide)){
a = fromJSON(df.complete.experiment_1$datastring[i])
df.wide$experiment[i] = df.complete.experiment_1$codeversion[i]
df.wide$participant[i] = i
df.wide$id[i] = a$workerId
if (is.null(a$questiondata$gender)){df.wide$gender[i] = NA
}else{
df.wide$gender[i] = a$questiondata$gender
}
df.wide$age[i] = a$questiondata$age
df.wide$condition[i] = a$condition
df.wide$counterbalance[i] = a$counterbalance
#cycles through the trials
for (j in 1:8){
df.wide[[paste("question_",j-1,sep="")]][i] =
a$data[[j]]$trialdata[[1]]
df.wide[[paste("rating_",j-1,sep="")]][i] =
a$data[[j]]$trialdata[[2]]
df.wide[[paste("throw_",j-1,sep="")]][i] =
a$data[[j]]$trialdata[[4]]
df.wide[[paste("grass_",j-1,sep="")]][i] =
a$data[[j]]$trialdata[[6]]
df.wide[[paste("distance_",j-1,sep="")]][i] =
a$data[[j]]$trialdata[[8]]
df.wide[[paste("wall_",j-1,sep="")]][i] =
a$data[[j]]$trialdata[[10]]
}
df.wide$feedback[i] = a$questiondata$feedback
}
df.long = wideToLong(subset(df.wide,select=-feedback),within="trial")
#create factors
df.long = mutate(df.long, question = as.factor(question),
throw = factor(throw,levels=c("low","high")),
grass = factor(grass,levels=c("low","high")),
distance = factor(distance,levels=c("short","long")),
wall = factor(wall,levels=c("no","yes")),
gender = factor(gender,levels=c("female","male","NA")),
age = as.numeric(age))
df.long = df.long[order(df.long$participant,df.long$question),]
install.packages(c("lsr", "dplyr", "RSQLite"))
# Packages ----------------------------------------------------------------
rm(list=ls())
library(lsr)
library(dplyr)
library(rjson)
library(RSQLite)
# Read data ---------------------------------------------------------------
con = dbConnect(SQLite(),dbname = "participants.db");
df.complete = dbReadTable(con,"almost") #change the name of the database here (mine was called "almost")
dbDisconnect(con)
#filter out incompletes
df.complete = subset(df.complete,status %in% c(3,4))
#save data of different experiments in separate data frames
df.complete.experiment_1 = subset(df.complete,codeversion == "experiment_1")
df.complete.experiment_2 = subset(df.complete,codeversion == "experiment_2")
df.complete.experiment_3 = subset(df.complete,codeversion == "experiment_3")
# EXP1: Structure data ----------------------------------------------------------
df.wide = data.frame(matrix(nrow=nrow(df.complete.experiment_1),ncol=8))
colnames(df.wide) = c("experiment","participant","id","gender","age","condition","counterbalance","feedback")
for (i in 1:nrow(df.wide)){
a = fromJSON(df.complete.experiment_1$datastring[i])
df.wide$experiment[i] = df.complete.experiment_1$codeversion[i]
df.wide$participant[i] = i
df.wide$id[i] = a$workerId
if (is.null(a$questiondata$gender)){df.wide$gender[i] = NA
}else{
df.wide$gender[i] = a$questiondata$gender
}
df.wide$age[i] = a$questiondata$age
df.wide$condition[i] = a$condition
df.wide$counterbalance[i] = a$counterbalance
#cycles through the trials
for (j in 1:8){
df.wide[[paste("question_",j-1,sep="")]][i] =
a$data[[j]]$trialdata[[1]]
df.wide[[paste("rating_",j-1,sep="")]][i] =
a$data[[j]]$trialdata[[2]]
df.wide[[paste("throw_",j-1,sep="")]][i] =
a$data[[j]]$trialdata[[4]]
df.wide[[paste("grass_",j-1,sep="")]][i] =
a$data[[j]]$trialdata[[6]]
df.wide[[paste("distance_",j-1,sep="")]][i] =
a$data[[j]]$trialdata[[8]]
df.wide[[paste("wall_",j-1,sep="")]][i] =
a$data[[j]]$trialdata[[10]]
}
df.wide$feedback[i] = a$questiondata$feedback
}
df.long = wideToLong(subset(df.wide,select=-feedback),within="trial")
#create factors
df.long = mutate(df.long, question = as.factor(question),
throw = factor(throw,levels=c("low","high")),
grass = factor(grass,levels=c("low","high")),
distance = factor(distance,levels=c("short","long")),
wall = factor(wall,levels=c("no","yes")),
gender = factor(gender,levels=c("female","male","NA")),
age = as.numeric(age))
df.long = df.long[order(df.long$participant,df.long$question),]
# Packages ----------------------------------------------------------------
rm(list=ls())
library(lsr)
library(dplyr)
library(rjson)
library(RSQLite)
# Read data ---------------------------------------------------------------
con = dbConnect(SQLite(),dbname = "participants.db");
df.complete = dbReadTable(con,"almost") #change the name of the database here (mine was called "almost")
dbDisconnect(con)
#filter out incompletes
df.complete = subset(df.complete,status %in% c(3,4))
#save data of different experiments in separate data frames
df.complete.experiment_1 = subset(df.complete,codeversion == "experiment_1")
df.complete.experiment_2 = subset(df.complete,codeversion == "experiment_2")
df.complete.experiment_3 = subset(df.complete,codeversion == "experiment_3")
# EXP1: Structure data ----------------------------------------------------------
df.wide = data.frame(matrix(nrow=nrow(df.complete.experiment_1),ncol=8))
colnames(df.wide) = c("experiment","participant","id","gender","age","condition","counterbalance","feedback")
for (i in 1:nrow(df.wide)){
a = fromJSON(df.complete.experiment_1$datastring[i])
df.wide$experiment[i] = df.complete.experiment_1$codeversion[i]
df.wide$participant[i] = i
df.wide$id[i] = a$workerId
if (is.null(a$questiondata$gender)){df.wide$gender[i] = NA
}else{
df.wide$gender[i] = a$questiondata$gender
}
df.wide$age[i] = a$questiondata$age
df.wide$condition[i] = a$condition
df.wide$counterbalance[i] = a$counterbalance
#cycles through the trials
for (j in 1:8){
df.wide[[paste("question_",j-1,sep="")]][i] =
a$data[[j]]$trialdata[[1]]
df.wide[[paste("rating_",j-1,sep="")]][i] =
a$data[[j]]$trialdata[[2]]
df.wide[[paste("throw_",j-1,sep="")]][i] =
a$data[[j]]$trialdata[[4]]
df.wide[[paste("grass_",j-1,sep="")]][i] =
a$data[[j]]$trialdata[[6]]
df.wide[[paste("distance_",j-1,sep="")]][i] =
a$data[[j]]$trialdata[[8]]
df.wide[[paste("wall_",j-1,sep="")]][i] =
a$data[[j]]$trialdata[[10]]
}
df.wide$feedback[i] = a$questiondata$feedback
}
df.long = wideToLong(subset(df.wide,select=-feedback),within="trial")
#create factors
df.long = mutate(df.long, question = as.factor(question),
throw = factor(throw,levels=c("low","high")),
grass = factor(grass,levels=c("low","high")),
distance = factor(distance,levels=c("short","long")),
wall = factor(wall,levels=c("no","yes")),
gender = factor(gender,levels=c("female","male","NA")),
age = as.numeric(age))
df.long = df.long[order(df.long$participant,df.long$question),]
library(dplyr)
install.packages("dplyr")
library(plyr)
# Packages ----------------------------------------------------------------
rm(list=ls())
library(lsr)
library(dplyr)
library(rjson)
library(RSQLite)
# Read data ---------------------------------------------------------------
con = dbConnect(SQLite(),dbname = "participants.db");
df.complete = dbReadTable(con,"almost") #change the name of the database here (mine was called "almost")
dbDisconnect(con)
#filter out incompletes
df.complete = subset(df.complete,status %in% c(3,4))
#save data of different experiments in separate data frames
df.complete.experiment_1 = subset(df.complete,codeversion == "experiment_1")
df.complete.experiment_2 = subset(df.complete,codeversion == "experiment_2")
df.complete.experiment_3 = subset(df.complete,codeversion == "experiment_3")
# EXP1: Structure data ----------------------------------------------------------
df.wide = data.frame(matrix(nrow=nrow(df.complete.experiment_1),ncol=8))
colnames(df.wide) = c("experiment","participant","id","gender","age","condition","counterbalance","feedback")
for (i in 1:nrow(df.wide)){
a = fromJSON(df.complete.experiment_1$datastring[i])
df.wide$experiment[i] = df.complete.experiment_1$codeversion[i]
df.wide$participant[i] = i
df.wide$id[i] = a$workerId
if (is.null(a$questiondata$gender)){df.wide$gender[i] = NA
}else{
df.wide$gender[i] = a$questiondata$gender
}
df.wide$age[i] = a$questiondata$age
df.wide$condition[i] = a$condition
df.wide$counterbalance[i] = a$counterbalance
#cycles through the trials
for (j in 1:8){
df.wide[[paste("question_",j-1,sep="")]][i] =
a$data[[j]]$trialdata[[1]]
df.wide[[paste("rating_",j-1,sep="")]][i] =
a$data[[j]]$trialdata[[2]]
df.wide[[paste("throw_",j-1,sep="")]][i] =
a$data[[j]]$trialdata[[4]]
df.wide[[paste("grass_",j-1,sep="")]][i] =
a$data[[j]]$trialdata[[6]]
df.wide[[paste("distance_",j-1,sep="")]][i] =
a$data[[j]]$trialdata[[8]]
df.wide[[paste("wall_",j-1,sep="")]][i] =
a$data[[j]]$trialdata[[10]]
}
df.wide$feedback[i] = a$questiondata$feedback
}
df.long = wideToLong(subset(df.wide,select=-feedback),within="trial")
#create factors
df.long = mutate(df.long, question = as.factor(question),
throw = factor(throw,levels=c("low","high")),
grass = factor(grass,levels=c("low","high")),
distance = factor(distance,levels=c("short","long")),
wall = factor(wall,levels=c("no","yes")),
gender = factor(gender,levels=c("female","male","NA")),
age = as.numeric(age))
df.long = df.long[order(df.long$participant,df.long$question),]
library(lsr)
foo <- c(3,12,10,5)
dim(foo) <-c(2,2)
foo
foo <- c(3,12,7,10,5,6)
dim(foo) <-c(3,2)
foo
fisher.test(foo)
foo <- c(10,20,1,20)
dim(foo) <- c(2,2)
foo
chisq.test(foo)
fisher.test(foo)
setwd("~/Dropbox/_Projects/PrimingMannerPath/MannerPathPriming")
items = read.csv("Experiment_Items_final.csv"), header = TRUE, stringsAsFactors = FALSE)
items = read.csv("Experiment_Items_final.csv", header = TRUE, stringsAsFactors = FALSE)
items = read.csv("Experiment_Items_final.csv", header = TRUE, stringsAsFactors = FALSE)
items
names(items)
items$ambigV
names(items)
items$trainV3
strplit(items$trainV3[1],'.',fixed = TRUE)
strsplit(items$trainV3[1],'.',fixed = TRUE)
getObj <- function(mystring){
wordz = strsplit(mystring,'.',fixed = TRUE)
}
getObj('word.e.e.e.e.')
getObj <- function(mystring){
wordz = strsplit(mystring,'.',fixed = TRUE)
return(wordz)
}
getObj('word.e.e.e.e.')
getObj <- function(mystring){
wordz = strsplit(mystring,'.',fixed = TRUE)
return(unlist(wordz))
}
getObj <- function(mystring){
wordz = strsplit(mystring,'.',fixed = TRUE)
return(unlist(wordz))
}
getObj('word.e.e.e.e.')
getObj <- function(mystring){
wordz = strsplit(mystring,'.',fixed = TRUE)
return(unlist(wordz)[3])
}
getObj('word.e.e.e.e.')
lapply(items$trainV3,getObj)
sapply(items$trainV3,getObj)
apply(items$trainV3,getObj)
mapply(items$trainV3,getObj)
sapply(items$trainV3,getObj)
items$word3 <- sapply(items$trainV3,getObj)
items$word3
items$wordamb <- sapply(items$ambigV,getObj)
items$word1 <- sapply(items$trainV1,getObj)
items$word2 <- sapply(items$trainV2,getObj)
items$word3 <- sapply(items$trainV3,getObj)
paste(items$word1, items$word1)
names(items)
items$wordName
items$verbName
items$condition
items$Condition
items$ambigAudFut <- paste(items$verbName, items$cond, 'future', items$wordamb, sep='_' )
items$ambigAudFut
items$cond <- 'manner'
items[items$Condition == 'Path',]$cond <- 'path'
items[items$Condition == 'Effect',]$cond <- 'path'
items$ambigAudFut <- paste(items$verbName, items$cond, 'future', items$wordamb, sep='_' )
items$ambigAudFut
items$cond
items$trainAudioFuture1 <- paste(items$verbName, items$cond, 'future', items$word1, sep='_' )
items$trainAudioPast1 <- paste(items$verbName, items$cond, 'past', items$word1, sep='_' )
items$trainAudioFuture1 <- paste(items$verbName, items$cond, 'future', items$word1, sep='_' )
items$trainAudioPast1 <- paste(items$verbName, items$cond, 'past', items$word1, sep='_' )
items$trainAudioPast1
items$trainAudioPast2
items$ambigAudioFuture <- paste(items$verbName, items$cond, 'future', items$wordamb, sep='_' )
items$ambigAudioPast <- paste(items$verbName, items$cond, 'past', items$wordamb, sep='_' )
items$trainAudioFuture1 <- paste(items$verbName, items$cond, 'future', items$word1, sep='_' )
items$trainAudioPast1 <- paste(items$verbName, items$cond, 'past', items$word1, sep='_' )
items$trainAudioFuture2 <- paste(items$verbName, items$cond, 'future', items$word2, sep='_' )
items$trainAudioPast2 <- paste(items$verbName, items$cond, 'past', items$word2, sep='_' )
items$trainAudioFuture3 <- paste(items$verbName, items$cond, 'future', items$word3, sep='_' )
items$trainAudioPast3 <- paste(items$verbName, items$cond, 'past', items$word3, sep='_' )
items$trainAudioPast2
items <- subset(items, select=-c(wordamb))
names(items)
items <- subset(items, select=-c(wordamb, word1, word2, word3, cond))
#Just an R file to automagically make the names of the audio files for Annelot :)
setwd("~/Dropbox/_Projects/PrimingMannerPath/MannerPathPriming")
items = read.csv("Experiment_Items_final.csv", header = TRUE, stringsAsFactors = FALSE)
#Add columns with the object for each critical video: original and train 1-3
items$ambigV <- as.character(items$ambigV)
items$trainV1 <- as.character(items$trainV1)
items$trainV2 <- as.character(items$trainV2)
items$trainV3 <- as.character(items$trainV3)
getObj <- function(mystring){
wordz = strsplit(mystring,'.',fixed = TRUE)
return(unlist(wordz)[3])
}
items$wordamb <- sapply(items$ambigV,getObj)
items$word1 <- sapply(items$trainV1,getObj)
items$word2 <- sapply(items$trainV2,getObj)
items$word3 <- sapply(items$trainV3,getObj)
#Now build the filenames!
items$cond <- 'manner'
items[items$Condition == 'Path',]$cond <- 'path'
items[items$Condition == 'Effect',]$cond <- 'path'
items$ambigAudioFuture <- paste(items$verbName, items$cond, 'future', items$wordamb, sep='_' )
items$ambigAudioPast <- paste(items$verbName, items$cond, 'past', items$wordamb, sep='_' )
items$trainAudioFuture1 <- paste(items$verbName, items$cond, 'future', items$word1, sep='_' )
items$trainAudioPast1 <- paste(items$verbName, items$cond, 'past', items$word1, sep='_' )
items$trainAudioFuture2 <- paste(items$verbName, items$cond, 'future', items$word2, sep='_' )
items$trainAudioPast2 <- paste(items$verbName, items$cond, 'past', items$word2, sep='_' )
items$trainAudioFuture3 <- paste(items$verbName, items$cond, 'future', items$word3, sep='_' )
items$trainAudioPast3 <- paste(items$verbName, items$cond, 'past', items$word3, sep='_' )
#Clean up the file a bit before saving it
items <- subset(items, select=-c(wordamb, word1, word2, word3, cond))
names(items)
items <- subset(items, select=-c(wordamb, word1, word2, word3, cond))
write.csv(items, "Experiment_Items_final_withaudio.csv")
#Just an R file to automagically make the names of the audio files for Annelot :)
setwd("~/Dropbox/_Projects/PrimingMannerPath/MannerPathPriming")
items = read.csv("Experiment_Items_final.csv", header = TRUE, stringsAsFactors = FALSE)
#Add columns with the object for each critical video: original and train 1-3
items$ambigV <- as.character(items$ambigV)
items$trainV1 <- as.character(items$trainV1)
items$trainV2 <- as.character(items$trainV2)
items$trainV3 <- as.character(items$trainV3)
getObj <- function(mystring){
wordz = strsplit(mystring,'.',fixed = TRUE)
return(unlist(wordz)[3])
}
items$wordamb <- sapply(items$ambigV,getObj)
items$word1 <- sapply(items$trainV1,getObj)
items$word2 <- sapply(items$trainV2,getObj)
items$word3 <- sapply(items$trainV3,getObj)
#Now build the filenames!
items$cond <- 'manner'
items[items$Condition == 'Path',]$cond <- 'path'
items[items$Condition == 'Effect',]$cond <- 'path'
items$ambigAudioFuture <- paste(items$verbName, items$cond, 'future', items$wordamb, sep='_' )
items$ambigAudioPast <- paste(items$verbName, items$cond, 'past', items$wordamb, sep='_' )
items$trainAudioFuture1 <- paste(items$verbName, items$cond, 'future', items$word1, sep='_' )
items$trainAudioPast1 <- paste(items$verbName, items$cond, 'past', items$word1, sep='_' )
items$trainAudioFuture2 <- paste(items$verbName, items$cond, 'future', items$word2, sep='_' )
items$trainAudioPast2 <- paste(items$verbName, items$cond, 'past', items$word2, sep='_' )
items$trainAudioFuture3 <- paste(items$verbName, items$cond, 'future', items$word3, sep='_' )
items$trainAudioPast3 <- paste(items$verbName, items$cond, 'past', items$word3, sep='_' )
items$ambigAudioFuture <- paste(items$ambigAudioFuture, 'wav', sep='.' )
items$ambigAudioFuture
#Just an R file to automagically make the names of the audio files for Annelot :)
setwd("~/Dropbox/_Projects/PrimingMannerPath/MannerPathPriming")
items = read.csv("Experiment_Items_final.csv", header = TRUE, stringsAsFactors = FALSE)
#Add columns with the object for each critical video: original and train 1-3
items$ambigV <- as.character(items$ambigV)
items$trainV1 <- as.character(items$trainV1)
items$trainV2 <- as.character(items$trainV2)
items$trainV3 <- as.character(items$trainV3)
getObj <- function(mystring){
wordz = strsplit(mystring,'.',fixed = TRUE)
return(unlist(wordz)[3])
}
items$wordamb <- sapply(items$ambigV,getObj)
items$word1 <- sapply(items$trainV1,getObj)
items$word2 <- sapply(items$trainV2,getObj)
items$word3 <- sapply(items$trainV3,getObj)
#Now build the filenames!
items$cond <- 'manner'
items[items$Condition == 'Path',]$cond <- 'path'
items[items$Condition == 'Effect',]$cond <- 'path'
items$ambigAudioFuture <- paste(items$verbName, items$cond, 'future', items$wordamb, sep='_' )
items$ambigAudioPast <- paste(items$verbName, items$cond, 'past', items$wordamb, sep='_' )
items$trainAudioFuture1 <- paste(items$verbName, items$cond, 'future', items$word1, sep='_' )
items$trainAudioPast1 <- paste(items$verbName, items$cond, 'past', items$word1, sep='_' )
items$trainAudioFuture2 <- paste(items$verbName, items$cond, 'future', items$word2, sep='_' )
items$trainAudioPast2 <- paste(items$verbName, items$cond, 'past', items$word2, sep='_' )
items$trainAudioFuture3 <- paste(items$verbName, items$cond, 'future', items$word3, sep='_' )
items$trainAudioPast3 <- paste(items$verbName, items$cond, 'past', items$word3, sep='_' )
items$ambigAudioFuture <- paste(items$ambigAudioFuture, 'wav', sep='.' )
items$ambigAudioPast <- paste(items$ambigAudioPast, 'wav', sep='.' )
items$trainAudioFuture1 <- paste(items$trainAudioFuture1, 'wav', sep='.' )
items$trainAudioPast1 <- paste(items$trainAudioPast1, 'wav', sep='.' )
items$trainAudioFuture2 <- paste(items$trainAudioFuture2, 'wav', sep='.' )
items$trainAudioPast2 <- paste(items$trainAudioPast2, 'wav', sep='.' )
items$trainAudioFuture3 <- paste(items$trainAudioFuture3, 'wav', sep='.' )
items$trainAudioPast3 <- paste(items$trainAudioPast3, 'wav', sep='.' )
#Clean up the file a bit before saving it
items <- subset(items, select=-c(wordamb, word1, word2, word3, cond))
write.csv(items, "Experiment_Items_final_withaudio.csv")
#IMPORTANT NOTE: After export, we have to change/check one item: Birking-manner.  In this item, there
#are 2 training trials with a spaceship object (around and into), so we'll manually rename those
#objects spaceship and spaceship2 and make sure audio files are named accordingly.
